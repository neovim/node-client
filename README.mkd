# neovim-client

[![Build Status](https://travis-ci.org/neovim/node-client.png)](https://travis-ci.org/neovim/node-client)
<br>


## Installation

```sh
npm install --global neovim-client
```

## Usage

This package exports a single `attach()` function which takes a pair of
write/read streams and returns a promise of Nvim API object. This is
similar to [node-msgpack5rpc](https://github.com/tarruda/node-msgpack5rpc), but
it provides an automatically generated API.

Examples:

```js
var cp = require('child_process');
var attach = require('promised-neovim-client').attach;

var nvim_proc = cp.spawn('nvim', ['-u', 'NONE', '-N', '--embed'], {});
attach(nvim_proc.stdin, nvim_proc.stdout).then(function(nvim) {
  nvim.on('request', function(method, args, resp) {
    // handle msgpack-rpc request
  });

  nvim.on('notification', function(method, args) {
    // handle msgpack-rpc notification
  });

  nvim
    .command('vsp')
    .then(() => nvim.getWindows())
    .then(windows => {
      console.log(windows.length);  // 2
      console.log(windows[0] instanceof nvim.Window); // true
      console.log(windows[1] instanceof nvim.Window); // true
      return nvim.setCurrentWindow(windows[1])
        .then(() => nvim.getCurrentWindow())
        .then(win => {
          console.log(win.equals(windows[1]))  // true
          nvim.quit();
          nvim.on('disconnect', () => console.log("Nvim exited!"));
        });
    }).catch(err => console.log(err.message));

}).catch(err => console.log(err.message));
```

Methods are attached to buffers, windows and tabpages according to the
msgpack-rpc name:

```js
nvim
  .getCurrentBuffer()
  .then(buf => {
    console.log(buf instanceof nvim.Buffer);  // true
    return buf
      .getLineSlice(0, -1, true, true);
      .then(lines => {
        console.log(lines);  // ['']
        return buf.setLineSlice(0, -1, true, true, ['line1', 'line2']);
      }).then(() => getLineSlice(0, -1, true, true))
      .then(lines => console.log(lines))  // ['line1', 'line2']
  });
```

A [typescript declaration file](index.d.ts) is available as documentation of the
API and also for typescript users that seek to use this library. Note that the
interfaces are [automatically generated](generate-typescript-interfaces.js) at a
certain point in time, and may not correspond exactly to the API of your
installed Nvim.
