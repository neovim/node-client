export default function attach(writer: NodeJS.WritableStream, reader: NodeJS.ReadableStream, cb: (err: Error, nvim: Nvim) => void): void;

export interface Nvim extends NodeJS.EventEmitter {
  quit(): void;
  bufLineCount(buffer: Buffer, cb: (err: Error, res: number) => void): void;
  bufGetLines(buffer: Buffer, start: number, end: number, strict_indexing: boolean, cb: (err: Error, res: Array<string>) => void): void;
  bufSetLines(buffer: Buffer, start: number, end: number, strict_indexing: boolean, replacement: Array<string>, cb: (err: Error) => void): void;
  bufGetVar(buffer: Buffer, name: string, cb: (err: Error, res: Object) => void): void;
  bufSetVar(buffer: Buffer, name: string, value: Object, cb: (err: Error) => void): void;
  bufDelVar(buffer: Buffer, name: string, cb: (err: Error) => void): void;
  bufGetOption(buffer: Buffer, name: string, cb: (err: Error, res: Object) => void): void;
  bufSetOption(buffer: Buffer, name: string, value: Object, cb: (err: Error) => void): void;
  bufGetNumber(buffer: Buffer, cb: (err: Error, res: number) => void): void;
  bufGetName(buffer: Buffer, cb: (err: Error, res: string) => void): void;
  bufSetName(buffer: Buffer, name: string, cb: (err: Error) => void): void;
  bufIsValid(buffer: Buffer, cb: (err: Error, res: boolean) => void): void;
  bufGetMark(buffer: Buffer, name: string, cb: (err: Error, res: Array<number>) => void): void;
  bufAddHighlight(buffer: Buffer, src_id: number, hl_group: string, line: number, col_start: number, col_end: number, cb: (err: Error, res: number) => void): void;
  bufClearHighlight(buffer: Buffer, src_id: number, line_start: number, line_end: number, cb: (err: Error) => void): void;
  tabpageListWins(tabpage: Tabpage, cb: (err: Error, res: Array<Window>) => void): void;
  tabpageGetVar(tabpage: Tabpage, name: string, cb: (err: Error, res: Object) => void): void;
  tabpageSetVar(tabpage: Tabpage, name: string, value: Object, cb: (err: Error) => void): void;
  tabpageDelVar(tabpage: Tabpage, name: string, cb: (err: Error) => void): void;
  tabpageGetWin(tabpage: Tabpage, cb: (err: Error, res: Window) => void): void;
  tabpageGetNumber(tabpage: Tabpage, cb: (err: Error, res: number) => void): void;
  tabpageIsValid(tabpage: Tabpage, cb: (err: Error, res: boolean) => void): void;
  uiAttach(width: number, height: boolean, enable_rgb: (err: Error) => void, cb: (err: Error) => void): void;
  uiDetach(cb: (err: Error) => void): void;
  uiTryResize(width: number, height: (err: Error, res: Object) => void, cb: (err: Error, res: Object) => void): void;
  uiSetOption(name: string, value: Object, cb: (err: Error) => void): void;
  command(command: string, cb: (err: Error) => void): void;
  feedkeys(keys: string, mode: string, escape_csi: boolean, cb: (err: Error) => void): void;
  input(keys: string, cb: (err: Error, res: number) => void): void;
  replaceTermcodes(str: string, from_part: boolean, do_lt: boolean, special: boolean, cb: (err: Error, res: string) => void): void;
  commandOutput(str: string, cb: (err: Error, res: string) => void): void;
  eval(expr: string, cb: (err: Error, res: Object) => void): void;
  callFunction(fname: string, args: Array<any>, cb: (err: Error, res: Object) => void): void;
  strwidth(str: string, cb: (err: Error, res: number) => void): void;
  listRuntimePaths(cb: (err: Error, res: Array<string>) => void): void;
  setCurrentDir(dir: string, cb: (err: Error) => void): void;
  getCurrentLine(cb: (err: Error, res: string) => void): void;
  setCurrentLine(line: string, cb: (err: Error) => void): void;
  delCurrentLine(cb: (err: Error) => void): void;
  getVar(name: string, cb: (err: Error, res: Object) => void): void;
  setVar(name: string, value: Object, cb: (err: Error) => void): void;
  delVar(name: string, cb: (err: Error) => void): void;
  getVvar(name: string, cb: (err: Error, res: Object) => void): void;
  getOption(name: string, cb: (err: Error, res: Object) => void): void;
  setOption(name: string, value: Object, cb: (err: Error) => void): void;
  outWrite(str: string, cb: (err: Error) => void): void;
  errWrite(str: string, cb: (err: Error) => void): void;
  errWriteln(str: string, cb: (err: Error) => void): void;
  listBufs(cb: (err: Error, res: Array<Buffer>) => void): void;
  getCurrentBuf(cb: (err: Error, res: Buffer) => void): void;
  setCurrentBuf(buffer: Buffer, cb: (err: Error) => void): void;
  listWins(cb: (err: Error, res: Array<Window>) => void): void;
  getCurrentWin(cb: (err: Error, res: Window) => void): void;
  setCurrentWin(window: Window, cb: (err: Error) => void): void;
  listTabpages(cb: (err: Error, res: Array<Tabpage>) => void): void;
  getCurrentTabpage(cb: (err: Error, res: Tabpage) => void): void;
  setCurrentTabpage(tabpage: Tabpage, cb: (err: Error) => void): void;
  subscribe(event: string, cb: (err: Error) => void): void;
  unsubscribe(event: string, cb: (err: Error) => void): void;
  getColorByName(name: string, cb: (err: Error, res: number) => void): void;
  getColorMap(cb: (err: Error, res: {}) => void): void;
  getApiInfo(cb: (err: Error, res: Array<any>) => void): void;
  callAtomic(calls: Array<any>, cb: (err: Error, res: Array<any>) => void): void;
  winGetBuf(window: Window, cb: (err: Error, res: Buffer) => void): void;
  winGetCursor(window: Window, cb: (err: Error, res: Array<number>) => void): void;
  winSetCursor(window: Window, pos: Array<number>, cb: (err: Error) => void): void;
  winGetHeight(window: Window, cb: (err: Error, res: number) => void): void;
  winSetHeight(window: Window, height: number, cb: (err: Error) => void): void;
  winGetWidth(window: Window, cb: (err: Error, res: number) => void): void;
  winSetWidth(window: Window, width: number, cb: (err: Error) => void): void;
  winGetVar(window: Window, name: string, cb: (err: Error, res: Object) => void): void;
  winSetVar(window: Window, name: string, value: Object, cb: (err: Error) => void): void;
  winDelVar(window: Window, name: string, cb: (err: Error) => void): void;
  winGetOption(window: Window, name: string, cb: (err: Error, res: Object) => void): void;
  winSetOption(window: Window, name: string, value: Object, cb: (err: Error) => void): void;
  winGetPosition(window: Window, cb: (err: Error, res: Array<number>) => void): void;
  winGetTabpage(window: Window, cb: (err: Error, res: Tabpage) => void): void;
  winGetNumber(window: Window, cb: (err: Error, res: number) => void): void;
  winIsValid(window: Window, cb: (err: Error, res: boolean) => void): void;
  equals(rhs: Nvim): boolean;
}
export interface Buffer {
  getLine(index: number, cb: (err: Error, res: string) => void): void;
  setLine(index: number, line: string, cb: (err: Error) => void): void;
  delLine(index: number, cb: (err: Error) => void): void;
  getLineSlice(start: number, end: number, include_start: boolean, include_end: boolean, cb: (err: Error, res: Array<string>) => void): void;
  setLineSlice(start: number, end: number, include_start: boolean, include_end: boolean, replacement: Array<string>, cb: (err: Error) => void): void;
  setVar(name: string, value: Object, cb: (err: Error, res: Object) => void): void;
  delVar(name: string, cb: (err: Error, res: Object) => void): void;
  insert(lnum: number, lines: Array<string>, cb: (err: Error) => void): void;
  lineCount(cb: (err: Error, res: number) => void): void;
  getLines(start: number, end: number, strict_indexing: boolean, cb: (err: Error, res: Array<string>) => void): void;
  setLines(start: number, end: number, strict_indexing: boolean, replacement: Array<string>, cb: (err: Error) => void): void;
  getVar(name: string, cb: (err: Error, res: Object) => void): void;
  getOption(name: string, cb: (err: Error, res: Object) => void): void;
  setOption(name: string, value: Object, cb: (err: Error) => void): void;
  getNumber(cb: (err: Error, res: number) => void): void;
  getName(cb: (err: Error, res: string) => void): void;
  setName(name: string, cb: (err: Error) => void): void;
  isValid(cb: (err: Error, res: boolean) => void): void;
  getMark(name: string, cb: (err: Error, res: Array<number>) => void): void;
  addHighlight(src_id: number, hl_group: string, line: number, col_start: number, col_end: number, cb: (err: Error, res: number) => void): void;
  clearHighlight(src_id: number, line_start: number, line_end: number, cb: (err: Error) => void): void;
  equals(rhs: Buffer): boolean;
}
export interface Window {
  setVar(name: string, value: Object, cb: (err: Error, res: Object) => void): void;
  delVar(name: string, cb: (err: Error, res: Object) => void): void;
  getBuffer(cb: (err: Error, res: Buffer) => void): void;
  getCursor(cb: (err: Error, res: Array<number>) => void): void;
  setCursor(pos: Array<number>, cb: (err: Error) => void): void;
  getHeight(cb: (err: Error, res: number) => void): void;
  setHeight(height: number, cb: (err: Error) => void): void;
  getWidth(cb: (err: Error, res: number) => void): void;
  setWidth(width: number, cb: (err: Error) => void): void;
  getVar(name: string, cb: (err: Error, res: Object) => void): void;
  getOption(name: string, cb: (err: Error, res: Object) => void): void;
  setOption(name: string, value: Object, cb: (err: Error) => void): void;
  getPosition(cb: (err: Error, res: Array<number>) => void): void;
  getTabpage(cb: (err: Error, res: Tabpage) => void): void;
  isValid(cb: (err: Error, res: boolean) => void): void;
  equals(rhs: Window): boolean;
}
export interface Tabpage {
  setVar(name: string, value: Object, cb: (err: Error, res: Object) => void): void;
  delVar(name: string, cb: (err: Error, res: Object) => void): void;
  getWindows(cb: (err: Error, res: Array<Window>) => void): void;
  getVar(name: string, cb: (err: Error, res: Object) => void): void;
  getWindow(cb: (err: Error, res: Window) => void): void;
  isValid(cb: (err: Error, res: boolean) => void): void;
  equals(rhs: Tabpage): boolean;
}
