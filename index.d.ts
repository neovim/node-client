export default function attach(writer: NodeJS.WritableStream, reader: NodeJS.ReadableStream, cb: (err: Error, nvim: Nvim) => void): void;

export interface Nvim extends NodeJS.EventEmitter {
  quit(): void;
  bufLineCount(buffer: any, cb: (err: Error, res: number) => void): void;
  bufGetLines(buffer: number, start: number, end: boolean, strict_indexing: any, cb: (err: Error, res: Array<string>) => void): void;
  bufSetLines(buffer: number, start: number, end: boolean, strict_indexing: Array<string>, replacement: any, cb: (err: Error) => void): void;
  bufGetVar(buffer: string, name: any, cb: (err: Error, res: Object) => void): void;
  bufSetVar(buffer: string, name: Object, value: any, cb: (err: Error) => void): void;
  bufDelVar(buffer: string, name: any, cb: (err: Error) => void): void;
  bufGetOption(buffer: string, name: any, cb: (err: Error, res: Object) => void): void;
  bufSetOption(buffer: string, name: Object, value: any, cb: (err: Error) => void): void;
  bufGetNumber(buffer: any, cb: (err: Error, res: number) => void): void;
  bufGetName(buffer: any, cb: (err: Error, res: string) => void): void;
  bufSetName(buffer: string, name: any, cb: (err: Error) => void): void;
  bufIsValid(buffer: any, cb: (err: Error, res: boolean) => void): void;
  bufGetMark(buffer: string, name: any, cb: (err: Error, res: Array<number>) => void): void;
  bufAddHighlight(buffer: number, src_id: string, hl_group: number, line: number, col_start: number, col_end: any, cb: (err: Error, res: number) => void): void;
  bufClearHighlight(buffer: number, src_id: number, line_start: number, line_end: any, cb: (err: Error) => void): void;
  tabpageListWins(tabpage: any, cb: (err: Error, res: Array<Window>) => void): void;
  tabpageGetVar(tabpage: string, name: any, cb: (err: Error, res: Object) => void): void;
  tabpageSetVar(tabpage: string, name: Object, value: any, cb: (err: Error) => void): void;
  tabpageDelVar(tabpage: string, name: any, cb: (err: Error) => void): void;
  tabpageGetWin(tabpage: any, cb: (err: Error, res: Window) => void): void;
  tabpageGetNumber(tabpage: any, cb: (err: Error, res: number) => void): void;
  tabpageIsValid(tabpage: any, cb: (err: Error, res: boolean) => void): void;
  uiAttach(width: number, height: number, enable_rgb: boolean, cb: (err: Error) => void): void;
  uiDetach(cb: (err: Error) => void): void;
  uiTryResize(width: number, height: number, cb: (err: Error, res: Object) => void): void;
  uiSetOption(name: Object, value: any, cb: (err: Error) => void): void;
  command(command: string, cb: (err: Error) => void): void;
  feedkeys(keys: string, mode: string, escape_csi: boolean, cb: (err: Error) => void): void;
  input(keys: string, cb: (err: Error, res: number) => void): void;
  replaceTermcodes(str: string, from_part: boolean, do_lt: boolean, special: boolean, cb: (err: Error, res: string) => void): void;
  commandOutput(str: string, cb: (err: Error, res: string) => void): void;
  eval(expr: string, cb: (err: Error, res: Object) => void): void;
  callFunction(fname: string, args: Array<any>, cb: (err: Error, res: Object) => void): void;
  strwidth(str: string, cb: (err: Error, res: number) => void): void;
  listRuntimePaths(cb: (err: Error, res: Array<string>) => void): void;
  setCurrentDir(dir: any, cb: (err: Error) => void): void;
  getCurrentLine(cb: (err: Error, res: string) => void): void;
  setCurrentLine(line: string, cb: (err: Error) => void): void;
  delCurrentLine(cb: (err: Error) => void): void;
  getVar(name: string, cb: (err: Error, res: Object) => void): void;
  setVar(name: string, value: Object, cb: (err: Error, res: Object) => void): void;
  delVar(name: string, cb: (err: Error, res: Object) => void): void;
  getVvar(name: string, cb: (err: Error, res: Object) => void): void;
  getOption(name: string, cb: (err: Error, res: Object) => void): void;
  setOption(name: string, value: Object, cb: (err: Error) => void): void;
  outWrite(str: string, cb: (err: Error) => void): void;
  errWrite(str: string, cb: (err: Error) => void): void;
  errWriteln(str: any, cb: (err: Error) => void): void;
  listBufs(cb: (err: Error, res: Array<Buffer>) => void): void;
  getCurrentBuf(cb: (err: Error, res: Buffer) => void): void;
  setCurrentBuf(buffer: any, cb: (err: Error) => void): void;
  listWins(cb: (err: Error, res: Array<Window>) => void): void;
  getCurrentWin(cb: (err: Error, res: Window) => void): void;
  setCurrentWin(window: any, cb: (err: Error) => void): void;
  listTabpages(cb: (err: Error, res: Array<Tabpage>) => void): void;
  getCurrentTabpage(cb: (err: Error, res: Tabpage) => void): void;
  setCurrentTabpage(tabpage: Tabpage, cb: (err: Error) => void): void;
  subscribe(event: string, cb: (err: Error) => void): void;
  unsubscribe(event: string, cb: (err: Error) => void): void;
  getColorByName(name: any, cb: (err: Error, res: number) => void): void;
  getColorMap(cb: (err: Error, res: {}) => void): void;
  getApiInfo(cb: (err: Error, res: Array<any>) => void): void;
  callAtomic(calls: any, cb: (err: Error, res: Array<any>) => void): void;
  winGetBuf(window: any, cb: (err: Error, res: Buffer) => void): void;
  winGetCursor(window: any, cb: (err: Error, res: Array<number>) => void): void;
  winSetCursor(window: Array<number>, pos: any, cb: (err: Error) => void): void;
  winGetHeight(window: any, cb: (err: Error, res: number) => void): void;
  winSetHeight(window: number, height: any, cb: (err: Error) => void): void;
  winGetWidth(window: any, cb: (err: Error, res: number) => void): void;
  winSetWidth(window: number, width: any, cb: (err: Error) => void): void;
  winGetVar(window: string, name: any, cb: (err: Error, res: Object) => void): void;
  winSetVar(window: string, name: Object, value: any, cb: (err: Error) => void): void;
  winDelVar(window: string, name: any, cb: (err: Error) => void): void;
  winGetOption(window: string, name: any, cb: (err: Error, res: Object) => void): void;
  winSetOption(window: string, name: Object, value: any, cb: (err: Error) => void): void;
  winGetPosition(window: any, cb: (err: Error, res: Array<number>) => void): void;
  winGetTabpage(window: any, cb: (err: Error, res: Tabpage) => void): void;
  winGetNumber(window: any, cb: (err: Error, res: number) => void): void;
  winIsValid(window: any, cb: (err: Error, res: boolean) => void): void;
  changeDirectory(dir: string, cb: (err: Error) => void): void;
  reportError(str: string, cb: (err: Error) => void): void;
  getBuffers(cb: (err: Error, res: Array<Buffer>) => void): void;
  getCurrentBuffer(cb: (err: Error, res: Buffer) => void): void;
  setCurrentBuffer(buffer: Buffer, cb: (err: Error) => void): void;
  getWindows(cb: (err: Error, res: Array<Window>) => void): void;
  getCurrentWindow(cb: (err: Error, res: Window) => void): void;
  setCurrentWindow(window: Window, cb: (err: Error) => void): void;
  getTabpages(cb: (err: Error, res: Array<Tabpage>) => void): void;
  nameToColor(name: string, cb: (err: Error, res: number) => void): void;
  equals(rhs: Nvim): boolean;
}
export interface Buffer {
  getLine(index: Buffer, cb: (err: Error, res: string) => void): void;
  setLine(index: Buffer, line: number, cb: (err: Error) => void): void;
  delLine(index: Buffer, cb: (err: Error) => void): void;
  getLineSlice(start: Buffer, end: number, include_start: number, include_end: boolean, cb: (err: Error, res: Array<string>) => void): void;
  setLineSlice(start: Buffer, end: number, include_start: number, include_end: boolean, replacement: boolean, cb: (err: Error) => void): void;
  setVar(name: Buffer, value: string, cb: (err: Error, res: Object) => void): void;
  delVar(name: Buffer, cb: (err: Error, res: Object) => void): void;
  insert(lnum: Buffer, lines: number, cb: (err: Error) => void): void;
  lineCount(cb: (err: Error, res: number) => void): void;
  getLines(start: Buffer, end: number, strict_indexing: number, cb: (err: Error, res: Array<string>) => void): void;
  setLines(start: Buffer, end: number, strict_indexing: number, replacement: boolean, cb: (err: Error) => void): void;
  getVar(name: Buffer, cb: (err: Error, res: Object) => void): void;
  getOption(name: Buffer, cb: (err: Error, res: Object) => void): void;
  setOption(name: Buffer, value: string, cb: (err: Error) => void): void;
  getNumber(cb: (err: Error, res: number) => void): void;
  getName(cb: (err: Error, res: string) => void): void;
  setName(name: Buffer, cb: (err: Error) => void): void;
  isValid(cb: (err: Error, res: boolean) => void): void;
  getMark(name: Buffer, cb: (err: Error, res: Array<number>) => void): void;
  addHighlight(src_id: Buffer, hl_group: number, line: string, col_start: number, col_end: number, cb: (err: Error, res: number) => void): void;
  clearHighlight(src_id: Buffer, line_start: number, line_end: number, cb: (err: Error) => void): void;
  equals(rhs: Buffer): boolean;
}
export interface Window {
  setVar(name: Window, value: string, cb: (err: Error, res: Object) => void): void;
  delVar(name: Window, cb: (err: Error, res: Object) => void): void;
  getBuffer(cb: (err: Error, res: Buffer) => void): void;
  getCursor(cb: (err: Error, res: Array<number>) => void): void;
  setCursor(pos: Window, cb: (err: Error) => void): void;
  getHeight(cb: (err: Error, res: number) => void): void;
  setHeight(height: Window, cb: (err: Error) => void): void;
  getWidth(cb: (err: Error, res: number) => void): void;
  setWidth(width: Window, cb: (err: Error) => void): void;
  getVar(name: Window, cb: (err: Error, res: Object) => void): void;
  getOption(name: Window, cb: (err: Error, res: Object) => void): void;
  setOption(name: Window, value: string, cb: (err: Error) => void): void;
  getPosition(cb: (err: Error, res: Array<number>) => void): void;
  getTabpage(cb: (err: Error, res: Tabpage) => void): void;
  isValid(cb: (err: Error, res: boolean) => void): void;
  equals(rhs: Window): boolean;
}
export interface Tabpage {
  setVar(name: Tabpage, value: string, cb: (err: Error, res: Object) => void): void;
  delVar(name: Tabpage, cb: (err: Error, res: Object) => void): void;
  getWindows(cb: (err: Error, res: Array<Window>) => void): void;
  getVar(name: Tabpage, cb: (err: Error, res: Object) => void): void;
  getWindow(cb: (err: Error, res: Window) => void): void;
  isValid(cb: (err: Error, res: boolean) => void): void;
  equals(rhs: Tabpage): boolean;
}
