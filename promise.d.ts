export default function attach(writer: NodeJS.WritableStream, reader: NodeJS.ReadableStream, cb: (err: Error, nvim: Nvim) => void): void;

export interface Nvim extends NodeJS.EventEmitter {
  quit(): void;
  bufLineCount(buffer: any): Promise<number>;
  bufGetLines(buffer: number, start: number, end: boolean, strict_indexing: any): Promise<Array<string>>;
  bufSetLines(buffer: number, start: number, end: boolean, strict_indexing: Array<string>, replacement: any): Promise<void>;
  bufGetVar(buffer: string, name: any): Promise<Object>;
  bufSetVar(buffer: string, name: Object, value: any): Promise<void>;
  bufDelVar(buffer: string, name: any): Promise<void>;
  bufGetOption(buffer: string, name: any): Promise<Object>;
  bufSetOption(buffer: string, name: Object, value: any): Promise<void>;
  bufGetNumber(buffer: any): Promise<number>;
  bufGetName(buffer: any): Promise<string>;
  bufSetName(buffer: string, name: any): Promise<void>;
  bufIsValid(buffer: any): Promise<boolean>;
  bufGetMark(buffer: string, name: any): Promise<Array<number>>;
  bufAddHighlight(buffer: number, src_id: string, hl_group: number, line: number, col_start: number, col_end: any): Promise<number>;
  bufClearHighlight(buffer: number, src_id: number, line_start: number, line_end: any): Promise<void>;
  tabpageListWins(tabpage: any): Promise<Array<Window>>;
  tabpageGetVar(tabpage: string, name: any): Promise<Object>;
  tabpageSetVar(tabpage: string, name: Object, value: any): Promise<void>;
  tabpageDelVar(tabpage: string, name: any): Promise<void>;
  tabpageGetWin(tabpage: any): Promise<Window>;
  tabpageGetNumber(tabpage: any): Promise<number>;
  tabpageIsValid(tabpage: any): Promise<boolean>;
  uiAttach(width: number, height: number, enable_rgb: boolean): Promise<void>;
  uiDetach(): Promise<void>;
  uiTryResize(width: number, height: number): Promise<Object>;
  uiSetOption(name: Object, value: any): Promise<void>;
  command(command: string): Promise<void>;
  feedkeys(keys: string, mode: string, escape_csi: boolean): Promise<void>;
  input(keys: string): Promise<number>;
  replaceTermcodes(str: string, from_part: boolean, do_lt: boolean, special: boolean): Promise<string>;
  commandOutput(str: string): Promise<string>;
  eval(expr: string): Promise<Object>;
  callFunction(fname: string, args: Array<any>): Promise<Object>;
  strwidth(str: string): Promise<number>;
  listRuntimePaths(): Promise<Array<string>>;
  setCurrentDir(dir: any): Promise<void>;
  getCurrentLine(): Promise<string>;
  setCurrentLine(line: string): Promise<void>;
  delCurrentLine(): Promise<void>;
  getVar(name: string): Promise<Object>;
  setVar(name: string, value: Object): Promise<Object>;
  delVar(name: string): Promise<Object>;
  getVvar(name: string): Promise<Object>;
  getOption(name: string): Promise<Object>;
  setOption(name: string, value: Object): Promise<void>;
  outWrite(str: string): Promise<void>;
  errWrite(str: string): Promise<void>;
  errWriteln(str: any): Promise<void>;
  listBufs(): Promise<Array<Buffer>>;
  getCurrentBuf(): Promise<Buffer>;
  setCurrentBuf(buffer: any): Promise<void>;
  listWins(): Promise<Array<Window>>;
  getCurrentWin(): Promise<Window>;
  setCurrentWin(window: any): Promise<void>;
  listTabpages(): Promise<Array<Tabpage>>;
  getCurrentTabpage(): Promise<Tabpage>;
  setCurrentTabpage(tabpage: Tabpage): Promise<void>;
  subscribe(event: string): Promise<void>;
  unsubscribe(event: string): Promise<void>;
  getColorByName(name: any): Promise<number>;
  getColorMap(): Promise<{}>;
  getApiInfo(): Promise<Array<any>>;
  callAtomic(calls: any): Promise<Array<any>>;
  winGetBuf(window: any): Promise<Buffer>;
  winGetCursor(window: any): Promise<Array<number>>;
  winSetCursor(window: Array<number>, pos: any): Promise<void>;
  winGetHeight(window: any): Promise<number>;
  winSetHeight(window: number, height: any): Promise<void>;
  winGetWidth(window: any): Promise<number>;
  winSetWidth(window: number, width: any): Promise<void>;
  winGetVar(window: string, name: any): Promise<Object>;
  winSetVar(window: string, name: Object, value: any): Promise<void>;
  winDelVar(window: string, name: any): Promise<void>;
  winGetOption(window: string, name: any): Promise<Object>;
  winSetOption(window: string, name: Object, value: any): Promise<void>;
  winGetPosition(window: any): Promise<Array<number>>;
  winGetTabpage(window: any): Promise<Tabpage>;
  winGetNumber(window: any): Promise<number>;
  winIsValid(window: any): Promise<boolean>;
  changeDirectory(dir: string): Promise<void>;
  reportError(str: string): Promise<void>;
  getBuffers(): Promise<Array<Buffer>>;
  getCurrentBuffer(): Promise<Buffer>;
  setCurrentBuffer(buffer: Buffer): Promise<void>;
  getWindows(): Promise<Array<Window>>;
  getCurrentWindow(): Promise<Window>;
  setCurrentWindow(window: Window): Promise<void>;
  getTabpages(): Promise<Array<Tabpage>>;
  nameToColor(name: string): Promise<number>;
  equals(rhs: Nvim): boolean;
}
export interface Buffer {
  getLine(index: Buffer): Promise<string>;
  setLine(index: Buffer, line: number): Promise<void>;
  delLine(index: Buffer): Promise<void>;
  getLineSlice(start: Buffer, end: number, include_start: number, include_end: boolean): Promise<Array<string>>;
  setLineSlice(start: Buffer, end: number, include_start: number, include_end: boolean, replacement: boolean): Promise<void>;
  setVar(name: Buffer, value: string): Promise<Object>;
  delVar(name: Buffer): Promise<Object>;
  insert(lnum: Buffer, lines: number): Promise<void>;
  lineCount(): Promise<number>;
  getLines(start: Buffer, end: number, strict_indexing: number): Promise<Array<string>>;
  setLines(start: Buffer, end: number, strict_indexing: number, replacement: boolean): Promise<void>;
  getVar(name: Buffer): Promise<Object>;
  getOption(name: Buffer): Promise<Object>;
  setOption(name: Buffer, value: string): Promise<void>;
  getNumber(): Promise<number>;
  getName(): Promise<string>;
  setName(name: Buffer): Promise<void>;
  isValid(): Promise<boolean>;
  getMark(name: Buffer): Promise<Array<number>>;
  addHighlight(src_id: Buffer, hl_group: number, line: string, col_start: number, col_end: number): Promise<number>;
  clearHighlight(src_id: Buffer, line_start: number, line_end: number): Promise<void>;
  equals(rhs: Buffer): boolean;
}
export interface Window {
  setVar(name: Window, value: string): Promise<Object>;
  delVar(name: Window): Promise<Object>;
  getBuffer(): Promise<Buffer>;
  getCursor(): Promise<Array<number>>;
  setCursor(pos: Window): Promise<void>;
  getHeight(): Promise<number>;
  setHeight(height: Window): Promise<void>;
  getWidth(): Promise<number>;
  setWidth(width: Window): Promise<void>;
  getVar(name: Window): Promise<Object>;
  getOption(name: Window): Promise<Object>;
  setOption(name: Window, value: string): Promise<void>;
  getPosition(): Promise<Array<number>>;
  getTabpage(): Promise<Tabpage>;
  isValid(): Promise<boolean>;
  equals(rhs: Window): boolean;
}
export interface Tabpage {
  setVar(name: Tabpage, value: string): Promise<Object>;
  delVar(name: Tabpage): Promise<Object>;
  getWindows(): Promise<Array<Window>>;
  getVar(name: Tabpage): Promise<Object>;
  getWindow(): Promise<Window>;
  isValid(): Promise<boolean>;
  equals(rhs: Tabpage): boolean;
}
